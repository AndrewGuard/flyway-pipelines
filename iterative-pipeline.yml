trigger:
  branches:
    include:
    - master
    # uncomment the below line to only trigger a pipeline run on a change to the migrations folder in master
    # - migrations/*

# todo
# 1. flyway_license_key
# 2. add -teams flag?


variables:
  snapshotExists: True
  group: REDGATE
  # template: pipeline_variables_template.yml

# parameters: 
#   template: pipeline_variables_template.yml

parameters:

  - name: pipelineStages
    type: object
    default: 

    - stage: 'Build'
      databaseName: 'Westwind_Build'
      JDBC: 'jdbc:sqlserver://localhost;database=Westwind_Build;integratedSecurity=true'
      dependsOn: ''
      displayName: 'Build'
      isBuild: true #IMPORTANT: only set isBuild to true if database can be destroyed
      manualIntervention: False
      server: WIN2016
      userName: Redgate
      password: Redg@te1

    - stage: 'Test'
      databaseName: 'Westwind_Test'
      JDBC: 'jdbc:sqlserver://localhost;database=Westwind_Test;integratedSecurity=true'
      dependsOn: 'Build'
      displayName: 'Deploy Test'
      isDeploy: true
      manualIntervention: False
      server: WIN2016
      userName: Redgate
      password: Redg@te1
    
    - stage: 'Prod'
      databaseName: 'Westwind'
      JDBC: 'jdbc:sqlserver://localhost;database=Westwind;integratedSecurity=true'
      dependsOn: 'Test'
      displayName: 'Deploy Prod'
      isDeploy: true
      manualIntervention: True
      server: WIN2016
      userName: Redgate
      password: Redg@te1

  - name: buildArtifactName 
    type: string
    default: 'Westwind-Build'

  - name: preReleaseSnapshot 
    type: string
    default: 'pre-release-snapshot.snp'

  - name: postReleaseSnapshot
    type: string
    default: 'post-release-snapshot.snp'

  - name: schemaCompare
    type: string
    default: '%dlmas_home%sc\sqlcompare'

stages:
  - ${{each stage in parameters.pipelineStages}}:
    - ${{if eq(stage.isBuild, true)}}:
      - stage: Build
        pool: Default
        displayName: ${{stage.displayName}} 
        dependsOn: ${{stage.dependsOn}}
        jobs:
        - job: Build
          steps:
            
            # - script: 'flyway clean info -url=${{stage.JDBC}}'
            #   failOnStderr: true
            #   displayName: 'Clean Build DB'
            #   env:
            #     FLYWAY_CLEAN_DISABLED: false

            # - script: 'flyway migrate info -url=${{stage.JDBC}}'
            #   failOnStderr: true
            #   displayName: 'Validate Migrate Scripts'

            # - script: 'flyway undo info -url=${{stage.JDBC}}'
            #   failOnStderr: true
            #   displayName: 'Validate Undo Scripts'
            
            - task: CopyFiles@2
              inputs:
                targetFolder: '$(System.ArtifactsDirectory)' 

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Build Artifact'
              inputs:
                ArtifactName: '${{parameters.buildArtifactName}}'
                PathtoPublish: '$(System.ArtifactsDirectory)'
    
    - ${{if eq(stage.isDeploy, true)}}:
      - stage: ${{stage.stage}} 
        pool: Default
        displayName: ${{stage.displayName}} 
        dependsOn: ${{stage.dependsOn}} 
        jobs:
        - job: PreRelease
          displayName: Pre Release Drift Detection
          steps:
            
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: '${{parameters.buildArtifactName}}'
                downloadPath: '$(System.ArtifactsDirectory)'

            # ---------------- if the agent is linux, the following steps will be executed --------------------
            
            - bash: 'mkdir -p ${{stage.stage}}'
              workingDirectory: '$(Agent.WorkFolder)'
              failOnStderr: true
              displayName: 'Cross Run Snapshots Folder Per Stage'
              condition: eq( variables['Agent.OS'], 'Linux' )

            - bash: '-f ${{parameters.postReleaseSnapshot}} || echo "##vso[task.setvariable variable=snapshotExists;isOutput=true]True"'
              workingDirectory: '$(Agent.WorkFolder)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Detect For Schema Snapshot From Previous Run'
              condition: eq( variables['Agent.OS'], 'Linux' )
            
            # ---------------- end linux ----------------------------------------------------------------------

            # ---------------- if the agent is windows, the following steps will be executed ------------------
            
            - powershell: |
                $path = "${{stage.stage}}"
                If(!(test-path $path))
                {
                      New-Item -ItemType Directory -Force -Path $path
                }
              displayName: 'Cross Run Snapshots Folder Per Stage'
              workingDirectory: '$(Agent.WorkFolder)'
              failOnStderr: true
              condition: eq( variables['Agent.OS'], 'Windows_NT' )

            - powershell: |
                $path = "${{parameters.postReleaseSnapshot}}"
                $fileExists = Test-Path -Path $path
                Write-Output "##vso[task.setvariable variable=snapshotExists]$fileExists"
              failOnStderr: true
              workingDirectory: '$(Agent.WorkFolder)/${{stage.stage}}'
              displayName: 'Detect For Schema Snapshot'
              condition: eq( variables['Agent.OS'], 'Windows_NT' )
            
            # ---------------- end windows -------------------------------------------------------------------

            - script: '"${{parameters.schemaCompare}}" /Server1:"${{stage.server}}" /userName1:"${{stage.userName}}" /password1:"${{stage.password}}" /Database1:${{stage.databaseName}} /Makesnapshot:"${{parameters.preReleaseSnapshot}}"'
              workingDirectory: '$(Agent.WorkFolder)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Pre-Release Schema Snapshot'
            
            - script: '"${{parameters.schemaCompare}}" /Snapshot1:"${{parameters.preReleaseSnapshot}}" /Snapshot2:"${{parameters.postReleaseSnapshot}}" /report:"$(System.ArtifactsDirectory)\Drift-Report.html" /force /ReportType:html /assertidentical  /include:Identical'
              workingDirectory: '$(Agent.WorkFolder)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Detect For Drift'
              condition: eq(variables['snapshotExists'], True)

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Drift Report'
              inputs:
                ArtifactName: 'Drift-Report'
                PathtoPublish: '$(System.ArtifactsDirectory)'

            - script: 'flyway migrate -outOfOrder=true -dryRunOutput="$(System.ArtifactsDirectory)\dryRunOutput.sql" -url=${{stage.JDBC}}'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              failOnStderr: true
              displayName: 'Pre-Release Deployment Report'
              env:
                FLYWAY_CLEAN_DISABLED: true

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Release Preview'
              inputs:
                ArtifactName: 'Release-Preview'
                PathtoPublish: '$(System.ArtifactsDirectory)'

            
        - ${{ if eq(stage.manualIntervention, true) }}:
          - job: CodeReview
            displayName: Code Review
            dependsOn: 'PreRelease'
            pool: server
            steps:
              - task: ManualValidation@0
                displayName: 'Review Change Report Prior To Release'
                timeoutInMinutes: 4320 # job times out in 3 days
                inputs:
                  notifyUsers: 'user@email.com'
                  instructions: 'Review changes'
        
        - ${{ if ne(stage.manualIntervention, true) }}:
          - job: CodeReview
            displayName: Skipping Code Review
            dependsOn: 'PreRelease'
        
        - job: Deploy
          displayName: Post Drift Detection Release
          dependsOn: 'CodeReview'
          steps:

            - script: 'flyway info migrate -outOfOrder=true info -url=${{stage.JDBC}}'
              workingDirectory: $(System.DefaultWorkingDirectory)
              displayName: ${{stage.displayName}}
              failOnStderr: true
              env:
                # clean destroys a target DB, keep disabled except for build step
                FLYWAY_CLEAN_DISABLED: true

            - script: '"${{parameters.schemaCompare}}" /Server1:"${{stage.server}}" /userName1:"${{stage.userName}}" /password1:"${{stage.password}}" /Database1:Westwind_Test /Makesnapshot:"${{parameters.postReleaseSnapshot}}"'
              workingDirectory: '$(Agent.WorkFolder)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Post Release Schema Snapshot'
            
            - script: '"${{parameters.schemaCompare}}" /Snapshot1:"${{parameters.postReleaseSnapshot}}" /Snapshot2:"${{parameters.preReleaseSnapshot}}" /report:"$(System.ArtifactsDirectory)\Change-Report.html" /force /ReportType:html /include:Identical'
              workingDirectory: '$(Agent.WorkFolder)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Write Change Report'
              condition: eq(variables['snapshotExists'], True)
            
            # todo only publish 1x
            - task: PublishBuildArtifacts@1
              displayName: 'Publish Change Report'
              inputs:
                ArtifactName: 'Change-Report'
                PathtoPublish: '$(System.ArtifactsDirectory)'
        