name: docker-ADO-hosted-pipeline

trigger:
  branches:
    include:
    - master
    - migrations/*

pool:
  vmImage: ubuntu-latest

variables:
  RELEASE_PREVIEW: 'Release-Preview.sql'
  BUILD_NAME: 'Build'
  SCHEMA_COMPARE: '%dlmas_home%sc\sqlcompare'
  # FLYWAY_DOCKER_IMAGE: flyway/flyway-azure:latest-alpine flyway                               #https://hub.docker.com/r/flyway/flyway
  FLYWAY_DOCKER_IMAGE: redgate/flyway:9.0.0-beta3-azure                                         #https://hub.docker.com/r/flyway/flyway
  FLYWAY_DOCKER_CONTAINER_NAME: flyway-container                                                #The name to provide to any Docker Container created
  FLYWAY_MIGRATIONS_PATH: $(Build.Repository.LocalPath)/$(Build.Repository.Name)/migrations
  FLYWAY_CONFIG_FILES: $(Build.Repository.LocalPath)/$(Build.Repository.Name)

  # userName and password remain environment specific because their values are evaluated at runtime
  FLYWAY_DOCKER_RUN: 'docker run --rm -v "$(FLYWAY_MIGRATIONS_PATH)":/flyway/sql -v "$(FLYWAY_CONFIG_FILES)":/flyway/conf $(FLYWAY_DOCKER_IMAGE) flyway -user=$(userName) -password=$(password) -licenseKey=$(FLYWAY_LICENSE_KEY)'
  
  # contains FLYWAY_LICENSE_KEY
  # group: flyway_vars
  FLYWAY_LICENSE_KEY: 'FL012EC30A3EFDE4049459C032ACDE1E0E18074C2040D49D48CC4016B4C1D3C3F15F8E9A90AC3E79BFA5BDDDDC3FA94A0808CCA8B41CBAF32B8669F3E2A2ECD6555EB848BD7DC1A9BF164B90D0A5AC6A26CF430BAE1A4142F1AF20D7F3D547CB34A1EBE1D68D8C7873425455489FE0D1EE4A2E947D620D2A52FE77585FDDA053738873CB6E0C7716D69F3437D722D4F656E2AB223058D7DBADEBD5F1D1DB63826FFAA348B31151EBD3629BBE2C910632FED593899778006B1416D471A22D604F1E307BC41B5365438F4BA8A078D0B8CD23CD7078D80D89BE4B2A1AF7037DA545BDC76658B52308F4FA22EADA8BD51D69F1D089429E3A13FC135E05B019CF2EA12840'
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: '002'

parameters:
  # IMPORTANT: DO NOT ADD DEPLOYMENT STEPS TO THE BUILD STAGE - THE BUILD IS A DESTRUCTIVE ACTION
  - name: buildStage
    type: object
    default: 
      
      stage: 'Build'
      databaseName: 'SouthWind_Build'
      JDBC: 'jdbc:sqlserver://instances.spawn.cc:30459;databaseName=SouthWind_Build;trustServerCertificate=true;encrypt=true'
      displayName: 'Build'
      manualIntervention: false
      variableGroupName: 'build_credentials_variable_group'

  # This is the extensible definition of your target environments. 
  # Every parameter in deploymentStages corresponds to an environment - here it's Test and Prod.
  # Pay attention to the 'dependsOn' field - this determines order of operations.
  - name: deploymentStages
    type: object
    default: 

    - stage: 'Test'
      databaseName: 'SouthWind_Test'
      JDBC: 'jdbc:sqlserver://instances.spawn.cc:30459;databaseName=SouthWind_Test;trustServerCertificate=true;encrypt=true'
      dependsOn: 'Build'
      displayName: 'Deploy Test'
      manualIntervention: false
      variableGroupName: 'test_credentials_variable_group'
    
    - stage: 'Prod'
      databaseName: 'SouthWind'
      JDBC: 'jdbc:sqlserver://instances.spawn.cc:30459;databaseName=SouthWind;trustServerCertificate=true;encrypt=true'
      dependsOn: 'Test'
      displayName: 'Deploy Prod'
      manualIntervention: true
      variableGroupName: 'prod_credentials_variable_group'

stages:
  - stage: ${{parameters.buildStage.stage}}
    displayName: ${{parameters.buildStage.displayName}} 
    jobs:
    - job: ${{parameters.buildStage.stage}}
      variables:
      - group: ${{ parameters.buildStage.variableGroupName }}
      steps:
        # - script: |
        #     docker pull $(FLYWAY_DOCKER_IMAGE)
        #   failOnStderr: true
        #   displayName: 'Docker Pull'

        # - script: |
        #     $(FLYWAY_DOCKER_RUN) info clean info -url='${{parameters.buildStage.JDBC}}' -cleanDisabled='false'
        #   failOnStderr: true
        #   displayName: 'Clean Build DB'

        # - script: |
        #     $(FLYWAY_DOCKER_RUN) info migrate info -url='${{parameters.buildStage.JDBC}}' -cleanDisabled='true'
        #   failOnStderr: true
        #   displayName: 'Migrate Build DB'

        # - script: |
        #     $(FLYWAY_DOCKER_RUN) info undo info -url='${{parameters.buildStage.JDBC}}' -target='$(FIRST_UNDO_SCRIPT)'? -cleanDisabled='true'
        #   failOnStderr: true
        #   displayName: 'Undo Build DB'

        # - script: |
        #     $(FLYWAY_DOCKER_RUN) check -check.tempUrl="${{parameters.buildStage.JDBC}}" -changes info -url='jdbc:sqlserver://instances.spawn.cc:30459;user=sa;Password=tYDGovRPko4htX0t;databaseName=SouthWind_Test;trustServerCertificate=true;encrypt=true' -user='$(userName)' -password='$(password)' -licenseKey='$(FLYWAY_LICENSE_KEY)' -enterprise -cleanDisabled='false'
        #   failOnStderr: true
        #   displayName: 'Check Test DB'
        
        - task: CopyFiles@2
          inputs:
            targetFolder: '$(System.ArtifactsDirectory)' 

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: '$(BUILD_NAME)'
            PathtoPublish: '$(System.ArtifactsDirectory)'
  
  - ${{each stage in parameters.deploymentStages}}:
    
    - stage: ${{stage.stage}} 
      displayName: ${{stage.displayName}} 
      dependsOn: ${{stage.dependsOn}} 
      jobs:
      - job: PreRelease
        displayName: Pre Release Artifacts
        variables:
        - group: ${{stage.variableGroupName}}
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(BUILD_NAME)'
              downloadPath: '$(System.ArtifactsDirectory)'

          # - script: |
          #     $(FLYWAY_DOCKER_RUN) migrate -outOfOrder=true -dryRunOutput='$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)' -url='${{stage.JDBC}}' -cleanDisabled='true'
          #   failOnStderr: true
          #   displayName: 'Pre-Release Deployment Report'

          # - task: PublishBuildArtifacts@1
          #   displayName: 'Publish Release Preview'
          #   inputs:
          #     ArtifactName: 'Release-Preview'
          #     PathtoPublish: '$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)'

      - ${{if eq(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Code Review
          dependsOn: 'PreRelease'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Review Change Report Prior To Release'
              timeoutInMinutes: 4320 # job times out in 3 days
              inputs:
                notifyUsers: |
                 'user@email.com'
                 'foo@foo.com'
                instructions: 'Review changes'
      
      - ${{if ne(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Skipping Code Review
          dependsOn: 'PreRelease'
      
      - job: Deploy
        displayName: Deployment
        dependsOn: 'CodeReview'
        variables:
        - group: ${{stage.variableGroupName}}
        steps:

          - script: |
              docker pull $(FLYWAY_DOCKER_IMAGE)
            failOnStderr: true
            displayName: 'Docker Pull'

          - script: |
              ls '$(FLYWAY_CONFIG_FILES)'
            failOnStderr: true
            displayName: 'ls FLYWAY_CONFIG_FILES'
          
          - script: |
              ls '$(FLYWAY_MIGRATIONS_PATH)'
            failOnStderr: true
            displayName: 'ls FLYWAY_MIGRATIONS_PATH'

          # - script: |
          #     ls '$(FLYWAY_DOCKER_RUN) > $(System.ArtifactsDirectory)/foo.txt'
          #   failOnStderr: true
          #   displayName: 'ls FLYWAY_DOCKER_RUN'

          - script: |
              echo "$(FLYWAY_DOCKER_RUN) info migrate info -url='${{parameters.buildStage.JDBC}}' -outOfOrder='true' -cleanDisabled='true'" > $(System.ArtifactsDirectory)/foo.txt
            displayName: echo script
            failOnStderr: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Echo'
            inputs:
              ArtifactName: 'foo.txt'
              PathtoPublish: '$(System.ArtifactsDirectory)'
          
          - script: |
              $(FLYWAY_DOCKER_RUN) info migrate info -url='${{stage.JDBC}}' -outOfOrder='true' -cleanDisabled='true' 
            displayName: ${{stage.displayName}}
            failOnStderr: true

          