name: docker-ADO-hosted-pipeline

trigger:
  branches:
    include:
    - master
    - migrations/*

pool:
  vmImage: ubuntu-latest

variables:
  RELEASE_PREVIEW: 'Release-Preview.sql'
  BUILD_NAME: 'Build'
  # FLYWAY_DOCKER_IMAGE: flyway/flyway-azure:latest-alpine                                      #https://hub.docker.com/r/flyway/flyway
  FLYWAY_DOCKER_IMAGE: redgate/flyway:9.0.0-beta3-azure                                         #https://hub.docker.com/r/flyway/flyway
  FLYWAY_DOCKER_CONTAINER_NAME: flyway-container                                                #The name to provide to any Docker Container created
  FLYWAY_MIGRATIONS_PATH: $(Build.Repository.LocalPath)/$(Build.Repository.Name)/migrations
  FLYWAY_CONFIG_FILES: $(Build.Repository.LocalPath)/$(Build.Repository.Name)

  # userName and password remain environment specific because their values are evaluated at runtime
  FLYWAY_DOCKER_RUN: 'docker run --rm -v "$(FLYWAY_MIGRATIONS_PATH)":/flyway/migrations -v "$(FLYWAY_CONFIG_FILES)":/flyway/conf $(FLYWAY_DOCKER_IMAGE) flyway -user=$(userName) -password=$(password) -licenseKey=$(FLYWAY_LICENSE_KEY)'
  
  # contains FLYWAY_LICENSE_KEY
  group: flyway_vars
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: '002'
  # This number should always be just below the first migration script
  ABOVE_BASELINE_VERSION: '001_99999999999999'

parameters:
  # IMPORTANT: DO NOT ADD DEPLOYMENT STEPS TO THE BUILD STAGE - THE BUILD IS A DESTRUCTIVE ACTION
  - name: buildStage
    type: object
    default: 
      
      stage: 'Build'
      databaseName: 'SouthWind_Build'
      JDBC: 'jdbc:sqlserver://instances.spawn.cc:30459;databaseName=SouthWind_Build;trustServerCertificate=true;encrypt=true'
      displayName: 'Build'
      pauseForCodeReview: false
      variableGroupName: 'build_credentials_variable_group'

  # This is the extensible definition of your target environments. 
  # Every parameter in deploymentStages corresponds to an environment - here it's Test and Prod.
  # Pay attention to the 'dependsOn' field - this determines order of operations.
  - name: deploymentStages
    type: object
    default: 

    - stage: 'Test'
      databaseName: 'SouthWind_Test'
      JDBC: 'jdbc:sqlserver://instances.spawn.cc:30459;databaseName=SouthWind_Test;trustServerCertificate=true;encrypt=true'
      dependsOn: 'Build'
      displayName: 'Deploy Test'
      pauseForCodeReview: false
      variableGroupName: 'test_credentials_variable_group'
    
    - stage: 'Prod'
      databaseName: 'SouthWind'
      JDBC: 'jdbc:sqlserver://instances.spawn.cc:30459;databaseName=SouthWind;trustServerCertificate=true;encrypt=true'
      dependsOn: 'Test'
      displayName: 'Deploy Prod'
      pauseForCodeReview: true
      variableGroupName: 'prod_credentials_variable_group'

stages:
  - stage: ${{parameters.buildStage.stage}}
    displayName: ${{parameters.buildStage.displayName}} 
    jobs:
    - job: ${{parameters.buildStage.stage}}
      variables:
      - group: ${{ parameters.buildStage.variableGroupName }}
      - group: flyway_vars
      steps:
        - script: |
            docker pull $(FLYWAY_DOCKER_IMAGE)
          failOnStderr: true
          displayName: 'Docker Pull'

        - script: |
            $(FLYWAY_DOCKER_RUN) info clean -licenseKey=$(FLYWAY_LICENSE_KEY) info -url='${{parameters.buildStage.JDBC}}' -cleanDisabled='false'
          failOnStderr: true
          displayName: 'Clean Build DB'

        - script: |
            $(FLYWAY_DOCKER_RUN) info migrate info -url='${{parameters.buildStage.JDBC}}' -cleanDisabled='true'
          failOnStderr: true
          displayName: 'Migrate Build DB'

        - script: |
            $(FLYWAY_DOCKER_RUN) info undo info -url='${{parameters.buildStage.JDBC}}' -target='$(FIRST_UNDO_SCRIPT)'? -cleanDisabled='true'
          failOnStderr: true
          displayName: 'Undo Build DB'

        # - script: |
        #     $(FLYWAY_DOCKER_RUN) check -check.tempUrl="${{parameters.buildStage.JDBC}}" -changes info -url='jdbc:sqlserver://instances.spawn.cc:30459;user=sa;Password=tYDGovRPko4htX0t;databaseName=SouthWind_Test;trustServerCertificate=true;encrypt=true' -user='$(userName)' -password='$(password)' -licenseKey='$(FLYWAY_LICENSE_KEY)' -enterprise -cleanDisabled='false'
        #   failOnStderr: true
        #   displayName: 'Check Test DB'
        
        - task: CopyFiles@2
          inputs:
            targetFolder: '$(System.ArtifactsDirectory)' 

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: '$(BUILD_NAME)'
            PathtoPublish: '$(System.ArtifactsDirectory)'
  
  - ${{each stage in parameters.deploymentStages}}:
    
    - stage: ${{stage.stage}} 
      displayName: ${{stage.displayName}} 
      dependsOn: ${{stage.dependsOn}} 
      jobs:
      - job: PreRelease
        displayName: Configure Release
        variables:
        - group: ${{stage.variableGroupName}}
        - group: flyway_vars
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(BUILD_NAME)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - script: |
              docker pull $(FLYWAY_DOCKER_IMAGE)
            failOnStderr: true
            displayName: 'Docker Pull'
            
          - script: |
              $(FLYWAY_DOCKER_RUN) migrate -outOfOrder=true -dryRunOutput='$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)' -url='${{stage.JDBC}}' -cleanDisabled='true' -user=$(userName) -password=$(password) -baselineOnMigrate=true -baselineVersion='$(ABOVE_BASELINE_VERSION)'
            failOnStderr: true
            displayName: 'Pre-Release Deployment Report'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Release Preview'
            inputs:
              ArtifactName: 'Release-Preview'
              PathtoPublish: '$(System.ArtifactsDirectory)'

      - ${{if eq(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Code Review
          dependsOn: 'PreRelease'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Review Change Report Prior To Release'
              timeoutInMinutes: 4320 # job times out in 3 days
              inputs:
                notifyUsers: |
                 'user@email.com'
                 'foo@foo.com'
                instructions: 'Review changes'
      
      - ${{if ne(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Skipping Code Review
          dependsOn: 'PreRelease'
      
      - job: Deploy
        displayName: Deployment
        dependsOn: 'CodeReview'
        variables:
        - group: ${{stage.variableGroupName}}
        - group: flyway_vars
        steps:

          - script: |
              docker pull $(FLYWAY_DOCKER_IMAGE)
            failOnStderr: true
            displayName: 'Docker Pull'

          - script: |
              $(FLYWAY_DOCKER_RUN) info migrate info -url='${{stage.JDBC}}' -outOfOrder='true' -cleanDisabled='true' -baselineOnMigrate=true -baselineVersion='$(ABOVE_BASELINE_VERSION)'
            displayName: ${{stage.displayName}}
            failOnStderr: true