trigger:
  branches:
    include:
    - master
    # uncomment the below line to only trigger a pipeline run on a change to the migrations folder in master
    # - migrations/*

# INSTRUCTIONS
# 1. This workflow is for a self-hosted Windows agent on Azure Devops
# 2. Install this on agent https://download.red-gate.com/checkforupdates/SCAPowerShell/
# 3. Install flyway cli on agent, add flyway to PATH
# 4. Provision a dev, shadow, build databases, as well as any other environments that need to be created (ie test and production if needed)

# 5. The easiest way to hook up a Flyway Desktop (FWD) project to a repository is to create a project and repository in Azure Devops. Then:
      # A. - When configuring FWD for the first time, open Flyway Desktop, create a NEW project. 
      # B. - Once your project is open, open a terminal or git GUI if your choice (there's a shortcut to open your terminal in the top right of Flyway Desktop). 
      # C. - Initialize a git project (git init). In your Azure Devops, go to your repository in your project, and follow the instructions listed to push up your local git repository to the centralized repository.
      # D. - For other team members, they should clone down the repository and in Flyway Desktop, OPEN an existing project.
          #  Configure the development database, and on the 'generate migrations' tab, configure the shadow database. 
          #  In the top left of FWD, there is a project dropdown. Open the project folder, and edit "flyway-dev.json" to have the following properties (this is a one time operation):
          # https://documentation.red-gate.com/fd/sql-server-comparison-options-138347108.html
          # "deployment": {
          #     "flywayConfFiles": [
          #       "./flyway.conf"
          #     ],
          #     "generateUndoScripts": true
          #   },
          #   "capabilities": {
          #     "comparison": {
          #         "filter": "./Filter.scpf",
          #         "options": {
          #             "ObjectExistenceChecks": true,
          #             "IgnorePermissions": true,
          #             "IgnoreDataCompression": false
          #         }
          #     }
          #   }

   # B. If the flyway desktop project has already been created by a teammate, clone the repo it to a local folder, then OPEN a flyway desktop project. 
        # It will be necessary to elect a development and shadow database still. The shadow database should be unique for every developer.

# 6. Save this pipeline file alongside the migrations and schema-model folders and commit and push.
# 7. When setting up an azure devops project, go to pipelines, create pipeline, define where your code is (azure repos git in this case), add "Existing Azure Pipelines YAML file", then point to this file
# 8. When creating the new pipeline, select empty job and create azure devops pipeline from existing YAML file, and point to this file
# 9. Set up variable groups. In this example, they are named "build_credentials_variable_group", "test_credentials_variable_group", "prod_credentials_variable_group"
#       These can be created under Pipelines -> Library. 
#       Create one variable group for every target database and add the exact same keys of userName and password, with potentially different values to each variable group.
# 10. Create a separate variable group for common variables across environments. In this example, it's called "flyway_vars". It contains FLYWAY_LICENSE_KEY
# 11. Define build and deployment steps. Be sure to carefully look at every variable.
# 12. Only set isBuild to true ONCE - be aware that that flag will DESTROY the database it's pointed at.
# 13. Either generate a migration and undo script or disable the build steps for the 1st run
# 14. Once your pipeline is working, uncomment line 6 to only trigger a release on a change to the migrations folder

# Every parameter in pipelineStages corresponds to an environment - here it's Build, Test, and Prod. 
# IMPORTANT: Build and all other environments are different - DO NOT COPY PASTE FROM THE BUILD STEP
parameters:
  - name: pipelineStages
    type: object
    default: 

    - stage: 'Build'
      databaseName: 'Westwind_Build'
      JDBC: 'jdbc:sqlserver://localhost;database=Westwind_Build;integratedSecurity=true'
      dependsOn: ''
      displayName: 'Build'
      isBuild: true #IMPORTANT: only set isBuild to true if database can be destroyed
      manualIntervention: false
      server: WIN2016
      # 'build_credentials_variable_group' is the name of an Azure DevOps Variable Group. These can be created under Pipelines -> Library
      # In this case we have a variable group called build_credentials_variable_group. It contains variables with the following secret values:
      # userName, password
      # Define any sensitive data inside of a variable group and reference as a variable
      # Ensure that the keys remain the same across variable groups, only change the name of the group itself and the respective values
      variableGroupName: 'build_credentials_variable_group'

    - stage: 'Test'
      databaseName: 'Westwind_Test'
      JDBC: 'jdbc:sqlserver://localhost;database=Westwind_Test;integratedSecurity=true'
      dependsOn: 'Build'
      displayName: 'Deploy Test'
      isDeploy: true
      manualIntervention: false
      failReleaseIfDriftDetected: false
      server: WIN2016
      variableGroupName: 'test_credentials_variable_group'
    
    - stage: 'Prod'
      databaseName: 'Westwind'
      JDBC: 'jdbc:sqlserver://localhost;database=Westwind;integratedSecurity=true'
      dependsOn: 'Test'
      displayName: 'Deploy Prod'
      isDeploy: true
      manualIntervention: true
      failReleaseIfDriftDetected: true
      server: WIN2016
      variableGroupName: 'prod_credentials_variable_group'

variables:
  SNAPSHOT_EXISTS: True
  CHANGE_REPORT: 'Change-Report.html'
  DRIFT_REPORT: 'Drift-Report.html'
  RELEASE_PREVIEW: 'Release-Preview.sql'
  BUILD_NAME: 'Build'
  PRE_RELEASE_SCHEMA_SNAPSHOT: 'pre-release-snapshot.snp'
  POST_RELEASE_SCHEMA_SNAPSHOT: 'post-release-snapshot.snp'
  SCHEMA_COMPARE: '%dlmas_home%sc\sqlcompare'
  FLYWAY: 'flyway'
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  UNDO_SCRIPT_TARGET_TO_VALIDATE: '1.9999'
  # contains FLYWAY_LICENSE_KEY
  group: flyway_vars

stages:
  - ${{each stage in parameters.pipelineStages}}:
    - ${{if eq(stage.isBuild, true)}}:
      - stage: Build
        pool: Default
        displayName: ${{stage.displayName}} 
        dependsOn: ${{stage.dependsOn}}
        jobs:
        - job: Build
          steps:
            
            - script: '$(FLYWAY) clean info -url=${{stage.JDBC}}'
              failOnStderr: true
              displayName: 'Clean Build DB'
              env:
                FLYWAY_CLEAN_DISABLED: false

            - script: '$(FLYWAY) migrate info -url=${{stage.JDBC}}'
              failOnStderr: true
              displayName: 'Validate Migrate Scripts'

            # -target="$(UNDO_SCRIPT_TARGET_TO_VALIDATE)"?
            # TODO - dont error out if no undo script exists
            - script: '$(FLYWAY) undo info -url=${{stage.JDBC}} -licenseKey=$(FLYWAY_LICENSE_KEY)'
              failOnStderr: true
              displayName: 'Validate Undo Scripts'
            
            - task: CopyFiles@2
              inputs:
                targetFolder: '$(System.ArtifactsDirectory)' 

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Build Artifact'
              inputs:
                ArtifactName: '$(BUILD_NAME)'
                PathtoPublish: '$(System.ArtifactsDirectory)'
    
    - ${{if eq(stage.isDeploy, true)}}:
      - stage: ${{stage.stage}} 
        pool: Default
        displayName: ${{stage.displayName}} 
        dependsOn: ${{stage.dependsOn}} 
        jobs:
        - job: PreRelease
          displayName: Pre Release Drift Detection
          variables:
          - group: ${{ stage.variableGroupName }}
          steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: '$(BUILD_NAME)'
                downloadPath: '$(System.ArtifactsDirectory)'

            # ---------------- if the agent is linux, the following steps will be executed --------------------
            
            - bash: 'mkdir -p $(System.TeamProject)/${{stage.stage}}'
              workingDirectory: '$(Agent.WorkFolder)'
              failOnStderr: true
              displayName: 'Dynamically Generate Workspace'
              condition: eq( variables['Agent.OS'], 'Linux')

            - bash: '-f $(POST_RELEASE_SCHEMA_SNAPSHOT) || echo "##vso[task.setvariable variable=SNAPSHOT_EXISTS;isOutput=true]True"'
              workingDirectory: '$(Agent.WorkFolder)/$(System.TeamProject)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Detect For Schema Snapshot From Previous Run'
              condition: eq( variables['Agent.OS'], 'Linux')
            
            # ---------------- end linux ----------------------------------------------------------------------

            # ---------------- if the agent is windows, the following steps will be executed ------------------
            
            - powershell: |
                $path = "$(System.TeamProject)/${{stage.stage}}"
                If(!(test-path $path))
                {
                      New-Item -ItemType Directory -Force -Path $path
                }
              displayName: 'Dynamically Generate Workspace'
              workingDirectory: '$(Agent.WorkFolder)'
              failOnStderr: true
              condition: eq( variables['Agent.OS'], 'Windows_NT')

            - powershell: |
                $path = "$(POST_RELEASE_SCHEMA_SNAPSHOT)"
                $fileExists = Test-Path -Path $path
                Write-Output "##vso[task.setvariable variable=SNAPSHOT_EXISTS]$fileExists"
              failOnStderr: true
              workingDirectory: '$(Agent.WorkFolder)/$(System.TeamProject)/${{stage.stage}}'
              displayName: 'Detect For Schema Snapshot'
              condition: eq( variables['Agent.OS'], 'Windows_NT')
            
            # ---------------- end windows -------------------------------------------------------------------

            - script: '"$(SCHEMA_COMPARE)" /Server1:"${{stage.server}}" /userName1:"$(userName)" /password1:"$(password)" /Database1:${{stage.databaseName}} /Makesnapshot:"$(PRE_RELEASE_SCHEMA_SNAPSHOT)"'
              workingDirectory: '$(Agent.WorkFolder)/$(System.TeamProject)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Pre-Release Schema Snapshot'
            
            - script: |
                "$(SCHEMA_COMPARE)" /Snapshot1:"$(PRE_RELEASE_SCHEMA_SNAPSHOT)" /Snapshot2:"$(POST_RELEASE_SCHEMA_SNAPSHOT)" /report:"$(System.ArtifactsDirectory)/${{stage.stage}}-$(DRIFT_REPORT)" /force /ReportType:html /assertidentical
              workingDirectory: '$(Agent.WorkFolder)/$(System.TeamProject)/${{stage.stage}}'
              failOnStderr: ${{stage.failReleaseIfDriftDetected}}
              displayName: 'Detect For Drift'
              condition: eq(variables['SNAPSHOT_EXISTS'], True)

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Drift Report'
              condition: always()
              inputs:
                ArtifactName: 'Drift-Report'
                PathtoPublish: '$(System.ArtifactsDirectory)\${{stage.stage}}-$(DRIFT_REPORT)'

            - script: '$(FLYWAY) migrate -outOfOrder=true -dryRunOutput="$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)" -url=${{stage.JDBC}} -licenseKey=$(FLYWAY_LICENSE_KEY)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              failOnStderr: true
              displayName: 'Pre-Release Deployment Report'
              env:
                FLYWAY_CLEAN_DISABLED: true

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Release Preview'
              inputs:
                ArtifactName: 'Release-Preview'
                PathtoPublish: '$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)'

        - ${{ if eq(stage.manualIntervention, true) }}:
          - job: CodeReview
            displayName: Code Review
            dependsOn: 'PreRelease'
            pool: server
            steps:
              - task: ManualValidation@0
                displayName: 'Review Change Report Prior To Release'
                timeoutInMinutes: 4320 # job times out in 3 days
                inputs:
                  notifyUsers: 'user@email.com'
                  instructions: 'Review changes'
        
        - ${{ if ne(stage.manualIntervention, true) }}:
          - job: CodeReview
            displayName: Skipping Code Review
            dependsOn: 'PreRelease'
        
        - job: Deploy
          displayName: Deployment
          dependsOn: 'CodeReview'
          variables:
          - group: ${{ stage.variableGroupName }}
          steps:

            - script: '$(FLYWAY) info migrate -outOfOrder=true info -url=${{stage.JDBC}} -licenseKey=$(FLYWAY_LICENSE_KEY)'
              workingDirectory: $(System.DefaultWorkingDirectory)
              displayName: ${{stage.displayName}}
              failOnStderr: true
              env:
                # clean destroys a target DB, keep disabled except for build step
                FLYWAY_CLEAN_DISABLED: true

            - script: '"$(SCHEMA_COMPARE)" /Server1:"${{stage.server}}" /userName1:"$(userName)" /password1:"$(password)" /Database1:${{stage.databaseName}} /Makesnapshot:"$(POST_RELEASE_SCHEMA_SNAPSHOT)"'
              workingDirectory: '$(Agent.WorkFolder)/$(System.TeamProject)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Post Release Schema Snapshot'

            - script: |
                "$(SCHEMA_COMPARE)" /Snapshot1:"$(POST_RELEASE_SCHEMA_SNAPSHOT)" /Snapshot2:"$(PRE_RELEASE_SCHEMA_SNAPSHOT)" /report:"$(System.ArtifactsDirectory)\${{stage.stage}}-$(CHANGE_REPORT)" /force /ReportType:html /include:Identical
                If ($lastExitCode == 63) {
                  exit 0
                }
              workingDirectory: '$(Agent.WorkFolder)/$(System.TeamProject)/${{stage.stage}}'
              failOnStderr: true
              displayName: 'Write Change Report'
              condition: eq(variables['SNAPSHOT_EXISTS'], True)
            
            - task: PublishBuildArtifacts@1
              displayName: 'Publish Change Report'
              inputs:
                ArtifactName: 'Change-Report'
                PathtoPublish: '$(System.ArtifactsDirectory)\${{stage.stage}}-$(CHANGE_REPORT)'
        