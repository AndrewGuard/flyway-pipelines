name: cherrypick-pipeline

# This pipeline will go through the build process and generate all artifacts as normal, it just
# requires a manual trigger and inputting a comma-separated list of version scripts.

trigger: none

parameters:

  - name: cherryPickVersions
    displayName: 'Scripts To Undo: Comma Separated List Of Full Version Numbers'
    default: ''
    type: string
  
  # IMPORTANT: DO NOT ADD DEPLOYMENT STEPS TO THE BUILD STAGE - THE BUILD IS A DESTRUCTIVE ACTION
  - name: buildStage
    type: object
    default: 

      stage: 'Build'
      displayName: 'Deploy Build'
      variableGroupName: 'build_credentials_variable_group' #contains userName, password, JDBC, databaseName

  # This is the extensible definition of your target environments. 
  # Every parameter in deploymentStages corresponds to an environment - here it's Test and Prod.
  # Pay attention to the 'dependsOn' field - this determines order of operations.
  - name: deploymentStages
    type: object
    default: 

    - stage: 'Test'
      dependsOn: 'Build'
      displayName: 'Deploy Test'
      pauseForCodeReview: false
      generateDriftAndChangeReport: true
      staticCodeAnalysis: false
      variableGroupName: 'test_credentials_variable_group'
    
    - stage: 'Prod'
      dependsOn: 'Test'
      displayName: 'Deploy Prod'
      pauseForCodeReview: true
      generateDriftAndChangeReport: true                    
      staticCodeAnalysis: false
      variableGroupName: 'prod_credentials_variable_group' 

variables:

  BUILD_NAME: 'Build'
  FLYWAY: 'flyway -user="$(userName)" -password="$(password)" -licenseKey=$(FLYWAY_LICENSE_KEY) -outOfOrder=true'
  RELEASE_PREVIEW: 'Release-Preview.sql'
  DRIFT_AND_CHANGE_REPORT: 'Drift-And-Change-Report.html'
  DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME: 'Drift And Change Report'
  
  group: flyway_vars
  cherryPickVersions: ${{parameters.cherryPickVersions}}

stages:
  - stage: Build
    pool: $(AGENT_POOL)
    displayName: ${{parameters.buildStage.displayName}} 
    jobs:
    - job: Build
      variables:
      - group: ${{parameters.buildStage.variableGroupName}}
      - group: flyway_vars
      steps:
        
        - script: '$(FLYWAY) clean info -url="$(JDBC)"'
          failOnStderr: true
          displayName: 'Clean Build DB'
          env:
            FLYWAY_CLEAN_DISABLED: false

        - script: '$(FLYWAY) migrate info -url="$(JDBC)" -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION)'
          failOnStderr: true
          displayName: 'Validate Migrate Scripts'

        - script: '$(FLYWAY) undo info -url="$(JDBC)" -target="$(FIRST_UNDO_SCRIPT)"?'
          continueOnError: true
          displayName: 'Validate Undo Scripts'
        
        - task: CopyFiles@2
          inputs:
            targetFolder: '$(System.ArtifactsDirectory)' 

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: '$(BUILD_NAME)'
            PathtoPublish: '$(System.ArtifactsDirectory)'

  - ${{each stage in parameters.deploymentStages}}:
    
    - stage: ${{stage.stage}} 
      pool: $(AGENT_POOL)
      displayName: ${{stage.displayName}} 
      dependsOn: ${{stage.dependsOn}} 
      jobs:
      - job: PreRelease
        displayName: Release Preview
        variables:
        - group: ${{stage.variableGroupName}}
        - group: flyway_vars
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(BUILD_NAME)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - script: '$(FLYWAY) migrate -dryRunOutput="$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)" -url=$(JDBC) -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION)'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            failOnStderr: true
            displayName: 'Pre-Release Deployment Report'
            env:
              FLYWAY_CLEAN_DISABLED: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Release Preview'
            inputs:
              ArtifactName: 'Release Preview'
              PathtoPublish: '$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)'
          
      - ${{if eq(stage.staticCodeAnalysis, true)}}:
        - job: ChangeReport
          dependsOn: 'PreRelease'
          displayName: Change Report With Code Analysis
          variables:
          - group: ${{stage.variableGroupName}}
          - group: flyway_vars
          steps:
            - script: 'pip install sqlfluff==1.2.1'
              displayName: 'Install SQL Fluff'
              failOnStderr: true
            
            - script: '$(FLYWAY) check -changes -drift -code -check.buildUrl=$(check_JDBC) -url="$(JDBC)" -check.reportFilename="$(System.ArtifactsDirectory)\$(databaseName)-$(Build.BuildId)-$(DRIFT_AND_CHANGE_REPORT)"'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              failOnStderr: true
              displayName: '$(DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME)'
              env:
                FLYWAY_CLEAN_DISABLED: false
            
            - task: PublishBuildArtifacts@1
              displayName: 'Publish $(DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME)'
              inputs:
                ArtifactName: '$(DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME)'
                PathtoPublish: '$(System.ArtifactsDirectory)\$(databaseName)-$(Build.BuildId)-$(DRIFT_AND_CHANGE_REPORT)'

      - ${{if and(eq( stage.generateDriftAndChangeReport, true), eq( stage.staticCodeAnalysis, false))}}:
        - job: ChangeReport
          displayName: Change Report
          dependsOn: 'PreRelease'
          variables:
          - group: ${{stage.variableGroupName}}
          - group: flyway_vars
          steps:
            - script: '$(FLYWAY) check -cherryPick=$(cherryPickVersions) -changes -drift -check.buildUrl=$(check_JDBC) -url="$(JDBC)" -check.reportFilename="$(System.ArtifactsDirectory)\$(databaseName)-$(Build.BuildId)-$(DRIFT_AND_CHANGE_REPORT)"'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              failOnStderr: true
              displayName: '$(DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME)'
              env:
                FLYWAY_CLEAN_DISABLED: false
            
            - task: PublishBuildArtifacts@1
              displayName: 'Publish $(DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME)'
              inputs:
                ArtifactName: '$(DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME)'
                PathtoPublish: '$(System.ArtifactsDirectory)\$(databaseName)-$(Build.BuildId)-$(DRIFT_AND_CHANGE_REPORT)'
      
      - ${{if and(eq( stage.generateDriftAndChangeReport, false), eq( stage.staticCodeAnalysis, false))}}:
        - job: ChangeReport
          displayName: Skipping Change Report
          pool: server
          dependsOn: 'PreRelease'

      - ${{if eq(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Code Review
          dependsOn: 'PreRelease'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Review Change Report Prior To Release'
              timeoutInMinutes: 4320 # job times out in 3 days
              inputs:
                notifyUsers: |
                  user@email.com
                  example@example.com
                instructions: 'Review changes'
      
      - ${{if ne(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Skipping Code Review
          dependsOn: 'PreRelease'
      
      - job: Deploy
        displayName: Deployment
        dependsOn: 'CodeReview'
        variables:
        - group: ${{stage.variableGroupName}}
        - group: flyway_vars
        steps:

          - script: '$(FLYWAY) -cherryPick=$(cherryPickVersions) info migrate info -url=$(JDBC) -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION)'
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: ${{stage.displayName}}
            failOnStderr: true
            env:
              FLYWAY_CLEAN_DISABLED: true # clean drops a target DB schema, keep disabled except for build step